//=+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=
// HashTable_LinkedList
//=+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=+=+==+=
// Name        : LinkedList.cpp
// Completed by: Janet Mardjuki
// Description : Implementation Function for Linked List
//==========================================================================================================================
#include "LinkedList.h"
#include <iostream>
#include <vector>
#include <string>

//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//===========================================   DEFAULT CONSTRUCTOR  =======================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Default Constructor
//==========================================================================================================================
// Create a Linked List
//	// PRE: N/A
//	// POST: Set the head as NULL and currentSize of list to zero
//	// PARAM: N/A
//==========================================================================================================================
LinkedList::LinkedList()
{
	head = NULL;
	currentSize = 0;
}

//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//===========================================   COPY CONSTRUCTOR  ==========================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Copy Constructor
//==========================================================================================================================
// Construct and array and copy contents from the list parameter
//	// PRE: N/A
//	// POST: Deep copy the toBeCopied to the calling linked list
//	// PARAM: toBeCopied is the Linked List to be copied
//==========================================================================================================================
LinkedList::LinkedList(const LinkedList &toBeCopied)
{
	copyHelper(toBeCopied);
}

//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//===============================================   DESTRUCTOR  ============================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Destructor
//==========================================================================================================================
// De-allocate all the memory associated with the calling linked list
//	// PRE: N/A
//	// POST: De-allocate all the memory associated with the calling linked list by calling removeAll function
//	// PARAM: N/A
//==========================================================================================================================
LinkedList::~LinkedList()
{
	removeAll();
}

//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//========================================= ASSIGNMENT OPERATOR =  =========================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Assignment Operator =
//==========================================================================================================================
// Assign the operator = so it will deep copy the parameter to 'this'
//	// PRE: N/A
//	// POST: If the calling object is not the parameter -> Deallocate all the memory associated with the calling object
//		   : -> Deep copy the contents of parameter and put in the calling object.
//		   : -> Return the calling object
//	// PARAM: N/A
//==========================================================================================================================
LinkedList &LinkedList::operator= (const LinkedList &toBeCopied)
{
	// Only do if the parameter is not the calling object 
	if(this != &toBeCopied)
	{
		removeAll();
		copyHelper(toBeCopied);
	}
	return *this;
}

//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//================================================== Copy Helper ===========================================================
//================================== ( Helper for [copy constructor & operator=] )  ========================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Copy Helper
//==========================================================================================================================
// Deep copy the parameter to the calling object
//	// PRE: N/A
//	// POST: Deep copy the parameter to the calling object
//	// PARAM: toBeCopied is the reference parameter pointing to Linked List to be copied
//==========================================================================================================================
void LinkedList::copyHelper(const LinkedList &toBeCopied)
{	
	// If the parameter list is empty
	if(toBeCopied.head == NULL)
	{
		// Create an empty list
		head = NULL;
		currentSize = 0;
	}
	else
	{
		// Deep copy the contents of the parameter list
		currentSize = toBeCopied.currentSize;
		// Copy the first node first
		Node* copyNode = new Node(toBeCopied.head->data, NULL);
		head = copyNode;

		Node* ptr = toBeCopied.head;
		ptr = ptr->next;
		// Copy the rest of the list until the tail
		while(ptr != NULL)
		{
			copyNode->next = new Node(ptr->data, NULL);
			copyNode = copyNode->next;
			ptr = ptr->next;
		}
	}

}
//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//================================================== Remove All ============================================================
//===================================== ( Helper for [destructor & operator=] )  ==========================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Remove All
//==========================================================================================================================
// De-allocate the memory associated with the calling object
//	// PRE: N/A
//	// POST: De-allocate the memory associated with the calling object and set the size of list to zero
//	// PARAM: N/A
//==========================================================================================================================
void LinkedList::removeAll()
{
	Node* tempNode = head;
	// De-allocate all the memory associated with the calling list from the head to tail
	while(tempNode != NULL)
	{
		tempNode = head->next;
		delete head;
		head = tempNode;
	}
	// Also set the size of the list to zero
	currentSize = 0;

}
//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//=====================================================   INSERT  ==========================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Insert
//==========================================================================================================================
// Insert item to the next availiable position in the list
//	// PRE: N/A
//	// POST: Insert item to the front of the linkked list. Return true if it's succesfully inserted; false otherwise
//	// PARAM: toBeInserted is the the string to be inserted in the list 
//==========================================================================================================================
bool LinkedList::insert(string toBeInserted)
{
	// If the string is already in the list
	if(search(toBeInserted))
	{
		return false;
	}
	else	// Else if the string is not in the list
	{
		// Create a new node of that string
		Node* newNode = new Node (toBeInserted, NULL);

		//If the list is empty
		if(head == NULL)
		{
			head = newNode;
		}
		else	// Else if the list is not empty
		{
			newNode->next = head;
			head = newNode;
		}
		currentSize++;
		return true;
	}
}

//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//=====================================================   REMOVE  ==========================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Remove
//==========================================================================================================================
// Remove the specific string that user wanted to remove
//	// PRE: N/A
//	// POST: Removes item from the linked list. Return true if it's succesfully removed; false otherwise
//	// PARAM: toBeRemoved is the the string to be removed from the list 
//==========================================================================================================================
bool LinkedList::remove(string toBeRemoved)
{	
	// If string does not exist in the list
	if(!search(toBeRemoved))
	{
		return false;
	}
	else	// String exist
	{
		// Node initialisation (so can remove and point the right one)
		Node* nodePtr = head;
		Node* tempNode = nodePtr->next;

		//If the head is the node we want to remove
		if(head->data == toBeRemoved)
		{
			head = tempNode;
			delete nodePtr;
			currentSize--;
			return true;
		}
		else
		{
			// Find the one user want to remove till the tail
			while(tempNode != NULL)
			{
				//If we found the node
				if(tempNode->data == toBeRemoved)
				{
					// Point the node before the current to the node after the current
					nodePtr->next = tempNode->next;
					delete tempNode;
					currentSize--;
					return true;

				}
				// Keep going the list insequence
				nodePtr = nodePtr->next;
				tempNode = tempNode->next;
			}
		}
	}
	// If not there, not possible tho, cause checked before 
	return false;
}

//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//===================================================   SEARCH  ============================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// Search
//==========================================================================================================================
// Check if the string user want to find exist
//	// PRE: N/A
//	// POST: Search the linked list, check if the string exist in the list. Return true if found, otherwise return false.
//	// PARAM: toBeSearched is the the string to be found in the list
//==========================================================================================================================
bool LinkedList::search(string toBeSearched) const
{
	Node* tempNode = head;
	
	//Check until the last node in list
	while(tempNode != NULL)
	{
		// If the current node contain the data that user wanted to check
		if(tempNode->data == toBeSearched)
		{
			return true;
		}
		tempNode = tempNode->next;

	}
	// Only return false if data not found after program had went thru the whole list
	return false;

}
//==========================================================================================================================
//--------------------------------------------------------------------------------------------------------------------------
//===================================================   GET  ============================================================
//--------------------------------------------------------------------------------------------------------------------------
//==========================================================================================================================
//
//==========================================================================================================================
// get
//==========================================================================================================================
// Get the vector of the calling linked list
//	// PRE: N/A
//	// POST: Return the vector containing the contents of the calling list
//	// PARAM: N/A
//==========================================================================================================================
vector<string> LinkedList::get() const
{
	vector<string> tempVector;
	if(head != NULL)
	{
		Node* tempNode = head;
		// Till the last node
		while(tempNode != NULL)
		{
			// Push back the contents in the vector
			tempVector.push_back(tempNode->data);
			// Move on to the  next node
			tempNode = tempNode->next;
		}
	}
	return tempVector;
}